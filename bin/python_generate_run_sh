#!/usr/bin/env python3

import os
import sys
import argparse

# Function to generate run.sh script
def generate_run_script(script_path, script_name, run_script_name, output_dir):
    run_script_content = f"""#!/bin/bash

# 获取当前脚本所在目录
script_path={script_path}

# 定义询问函数
ask() {{
    echo -n $1
    echo -n $' (y/n) \\n# '
    read choice
    case $choice in
        Y | y)
        return 0
    esac
    return -1
}}

# 从 .script 文件中读取配置
if [ -f "$script_path/.script" ]; then
    source "$script_path/.script"
fi

# 检查是否定义了 VENV_DIR
if [ -n "$VENV_DIR" ]; then
    # 虚拟环境目录
    venv_dir="$script_path/$VENV_DIR"

    # 虚拟环境中的 Python 解释器路径
    venv_python="$venv_dir/bin/python"

    # 检查并创建虚拟环境
    if [ ! -d "$venv_dir" ]; then
        if ask "Virtual environment does not exist. Do you want to create it?"; then
            echo "Creating virtual environment..."
            python3 -m venv "$venv_dir"
            # 安装依赖
            if [ -f "$script_path/requirements.txt" ]; then
                echo "Installing dependencies..."
                "$venv_python" -m pip install -r "$script_path/requirements.txt"
            fi
        fi
        
        exit 1
    fi

    # 使用 exec 替换当前进程为虚拟环境中的 Python 解释器，传递所有参数
    exec "$venv_python" ${{script_path}}/{script_name} "$@"
else
    # 如果没有定义 VENV_DIR，直接使用系统 Python 运行脚本
    exec python3 ${{script_path}}/{script_name} "$@"
fi
"""
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    run_script_path = os.path.join(output_dir, run_script_name)
    with open(run_script_path, "w") as run_script_file:
        run_script_file.write(run_script_content)

    # Make run.sh executable
    os.chmod(run_script_path, 0o755)
    print(f"run.sh script generated at {run_script_path}")

def replace_home_with_tilde(path):
    home_dir = os.path.expanduser("~")
    if path.startswith(home_dir):
        return path.replace(home_dir, "~", 1)
    return path

def main():
    parser = argparse.ArgumentParser(description="Generate run.sh script for a Python project.")
    parser.add_argument("python_script", help="The Python script that will be run by the generated run.sh.")
    parser.add_argument("-o", "--output-dir", default=os.path.expanduser("~/.dotfiles/bin"), help="Directory to place the generated run.sh script (default: '~/.dotfiles/bin').")
    
    args = parser.parse_args()

    python_script = args.python_script
    if not os.path.exists(python_script):
        print(f"Error: Python script '{python_script}' does not exist.")
        sys.exit(1)

    # Get base name of Python script to name the run.sh
    script_name = os.path.basename(python_script)
    run_script_name = f"{os.path.splitext(script_name)[0]}"

    # Determine paths
    output_dir = args.output_dir

    # Generate run.sh script
    generate_run_script(replace_home_with_tilde(os.getcwd()), python_script, run_script_name, output_dir)

if __name__ == "__main__":
    main()

