{
  "shebang": {
    "prefix": ["#!", "shebang"],
    "body": "#!/usr/bin/env python3",
    "description": [
      "Option 1:\n",
      "#!/bin/python3\n",
      "Option 2:\n",
      "#!/usr/bin/env python3\n"
    ]
  },
  "yyyy": {
    "prefix": ["yyyyMMddHHmmss"],
    "body": [ "%Y-%m-%d %H:%M:%S" ],
    "description": "yyyy"
  },
  "def sleep_until():": {
    "prefix": ["defsleepuntil"],
    "body": "def sleep_until(year=-1, month=-1, day=-1, hour=0, minute=0, second=0, mills=0):\n    import time\n    import datetime\n\n    today = datetime.datetime.now()\n    if year == -1:\n        year = today.year\n\n    if month == -1:\n        month = today.month\n\n    if day == -1:\n        day = today.day\n\n    target_datetime = datetime.datetime(\n        year, month, day, hour, minute, second, mills * 1000\n    )\n    print('sleep until', target_datetime)\n\n    while True:\n        now = datetime.datetime.now()\n        if now >= target_datetime:\n            print(now)\n            return\n        time.sleep(0.001)",
    "description": "sleep until"
  },
  "fori": {
    "prefix": ["fori"],
    "body": [ 
      "for ${1:i} in range(${2:10}):",
      "    ${3}"
    ],
    "description": "for i in range"
  },
  "if __name__ == \"__main__\"": {
      "prefix": "ifmain",
      "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
      "description" : "Create implicitly all the code at the top level using the __name__ special variable."
  },
  "try:except:": {
      "prefix": "try",
      "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
      "description" : "Code Snippet for a try and except blocks."
  },
  "try:except:finally": {
      "prefix": "tryf",
      "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
      "description" : "Code Snippet for a try/except/finally."
  },
  "#!/usr/bin/env python3": {
      "prefix": "env3",
      "body": "#!/usr/bin/env python3\n$0",
      "description" : "Adds shebang line for default python 3 interpreter."
  },
  "New class": {
      "prefix": "class",
      "body": [
          "class ${1:ClassName}(${2:object}):",
          "\t\"\"\"${3:docstring for $1.}\"\"\"",
          "\tdef __init__(self, ${4:arg}):",
          "\t\t${5:super($1, self).__init__()}",
          "\t\tself.$4 = $4",
          "\t\t$0"
      ],
      "description" : "Code snippet for a class definition."
  },
  "New method": {
      "prefix": "defs",
      "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0",
      "description" : "Code snippet for a class method definition."
  },
  "New function": {
      "prefix": "def",
      "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
      "description" : "Code snippet for function definition."
  },
  "if": {
      "prefix": "if",
      "body": "if ${1:condition}:\n\t${2:pass}$0",
      "description" : "Code snippet for the if statement."
  },
  "for": {
      "prefix": "for",
      "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
      "description" : "Code snippet to create a for loop structure."
  },
  "while": {
      "prefix": "while",
      "body": "while ${1:condition}:\n\t${2:pass}$0",
      "description" : "Code snippet to create a while loop structure."
  },
  "self": {
      "prefix": "s",
      "body": "self.$0",
      "description" : "Shortend snippet to reference the self property in an object."
  }
}
