let g:coc_enable = 1
let s:nvim_treesitter = 0
let g:loaded_clipboard_provider = 1

" vim-plug {{{
call plug#begin('~/.vim/plugged')

" if has("mac")
"     Plug 'lu5je0/im-switcher'
" endif
Plug 'lu5je0/lightline-bufferline'
Plug 'tpope/vim-surround', {'on': []}
Plug 'jiangmiao/auto-pairs'
Plug 'schickling/vim-bufonly'
Plug 'liuchengxu/vista.vim', {'on': []}

if has("nvim")
    let s:nvim_treesitter = 1
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
endif

Plug 'chr4/nginx.vim'
Plug 'cespare/vim-toml'
Plug 'dstein64/vim-startuptime'

" fern
Plug 'lu5je0/fern.vim', {'on': []}
Plug 'lu5je0/fern-renderer-nerdfont.vim', {'on': []}
Plug 'lambdalisue/nerdfont.vim'
Plug 'lambdalisue/fern-hijack.vim', {'on': []}
Plug 'lambdalisue/glyph-palette.vim', {'on': []}
Plug 'lambdalisue/fern-git-status.vim', {'on': []}
Plug 'yuki-yano/fern-preview.vim', {'on': []}

Plug 'yianwillis/vimcdoc'
Plug 'chrisbra/vim-diff-enhanced'
Plug 'MTDL9/vim-log-highlighting'
Plug 'tpope/vim-commentary'
Plug 'honza/vim-snippets'
Plug 'mg979/vim-visual-multi', {'on': []}
Plug 'kana/vim-textobj-user'
Plug 'sgur/vim-textobj-parameter', {'on': []}
Plug 'kana/vim-textobj-entire', {'on': []}
Plug 'mhinz/vim-signify', {'on': []}
Plug 'voldikss/vim-translator'
Plug 'tpope/vim-fugitive', {'on': []}
Plug 'rbong/vim-flog', {'on': []}
Plug 'tpope/vim-repeat'
Plug 'lu5je0/vim-java-bytecode'
Plug 'vim-scripts/ReplaceWithRegister'

" Peekaboo extends " and @ in normal mode and <CTRL-R> in insert mode so you can see the contents of the registers.
Plug 'junegunn/vim-peekaboo'
Plug 'lu5je0/vim-terminal-help', {'on': []}
Plug 'skywind3000/asynctasks.vim', {'on': []}
Plug 'skywind3000/asyncrun.vim', {'on': []}
Plug 'skywind3000/asyncrun.extra', {'on': []}
Plug 'elzr/vim-json'
Plug 'machakann/vim-highlightedyank'
Plug 'tommcdo/vim-exchange'
Plug 'mbbill/undotree', {'on': []}
Plug 'liuchengxu/vim-which-key'
Plug 'lu5je0/vim-base64'

if !has("gui")
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
endif

if g:coc_enable == 1
    Plug 'neoclide/coc.nvim', {'branch': 'release', 'on': []}
else
    Plug 'ervandew/supertab'
endif

" save with sudo
if !has("win32")
    Plug 'lambdalisue/suda.vim', { 'on': [] }
endif

if !has("gui") && !has("mac")
    Plug 'brglng/vim-im-select', { 'on': [] }
endif

Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

" 变量命名转换
Plug 'chiedo/vim-case-convert'

Plug 'itchyny/lightline.vim'

" themes
Plug 'tomasiser/vim-code-dark'
Plug 'lu5je0/vim-one'
Plug 'gruvbox-community/gruvbox'
Plug 'hzchirs/vim-material'
Plug 'ayu-theme/ayu-vim'
Plug 'w0ng/vim-hybrid'
Plug 'lu5je0/lightline-ones'
call plug#end()
" }}}

call timer_start(20, 'LoadPlug')
function! LoadPlug(timer) abort

  if g:coc_enable == 1
      call plug#load('coc.nvim')
      runtime plug-config/coc.vim
  endif

  runtime im.vim
  if !has("gui") && !has("mac")
      call plug#load('vim-im-select')
  endif

  unlet g:loaded_clipboard_provider
  runtime autoload/provider/clipboard.vim

  call plug#load('fern.vim')
  call plug#load('fern-renderer-nerdfont.vim')
  call plug#load('fern-hijack.vim')
  call plug#load('glyph-palette.vim')
  call plug#load('fern-git-status.vim')
  call plug#load('fern-preview.vim')
  runtime plug-config/fern.vim

  call plug#load('vim-visual-multi')
  call plug#load('vim-textobj-entire')
  call plug#load('vim-textobj-parameter')

  call plug#load('asynctasks.vim')
  call plug#load('asyncrun.vim')
  call plug#load('asyncrun.extra')
  call plug#load('vim-fugitive')
  call plug#load('vim-flog')

  if !has("win32")
      call plug#load('suda.vim')
  endif

  call plug#load('undotree')
  call plug#load('vim-surround')
  call plug#load('vista.vim')
  call plug#load('vim-signify')
  call plug#load('vim-terminal-help')
endfunction

" runtime 加载.vim {{{
runtime settings.vim
runtime foldtext.vim
if has("win32")
    runtime escalt.vim
endif
runtime gvim.vim
runtime functions.vim
runtime plug-config/leaderf.vim
runtime plug-config/autoformat.vim
runtime plug-config/terminal.vim
runtime plug-config/lightline.vim
runtime plug-config/vista.vim
" }}}

" autocmd {{{
augroup file_type
    autocmd!
    autocmd FileType * set formatoptions-=o | if getfsize(@%) > 1024 * 1024 | setlocal syntax=OFF | endif
augroup END
" }}}


" treesitter {{{ "
if s:nvim_treesitter == 1
lua <<EOF
require'nvim-treesitter.configs'.setup {
  -- Modules and its options go here
  ensure_installed = { "java", "python", "lua", "c", "json" },
  highlight = { enable = true },
  incremental_selection = { enable = true },
  textobjects = { enable = true },
}
EOF
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
endif
" }}} treesitter "


" vim-expand-region {{{
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
" }}}

" vim-diff-enhanced {{{
set diffopt+=internal,algorithm:patience
" }}}

" vim-json {{{
let g:vim_json_syntax_conceal = 0
" }}}

" vim-commentary {{{
augroup vim_commentary
    autocmd FileType crontab setlocal commentstring=#\ %s
augroup END
" }}}

" auto-paris {{{
let g:AutoPairs= {'(':')', '[':']', '{':'}',"'":"'",'"':'"', "`":"`", '```':'```', '"""':'"""', "'''":"'''"}
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutJump = ''
let g:AutoPairsShortcutFastWrap = ''
let g:AutoPairsMoveCharacter = ''
" }}}

" vim-textobj-parameter {{{
let g:vim_textobj_parameter_mapping = 'a'
" }}}

" delimitMate {{{
let g:delimitMate_expand_cr=1
" }}}

" supertab {{{
let g:SuperTabDefaultCompletionType = "<c-n>"
" }}}

" highlightedyank {{{
let g:highlightedyank_highlight_duration=300
" }}}

" toggle_terminal {{{

" set your favorite shell
if has("win32")
    let g:toggle_terminal#command = 'wsl'
else
    let g:toggle_terminal#command = ''
endif

" set terminal window position
" (see possible options at :help vertical)
" let g:toggle_terminal#position = 's'

" }}}

" undotree {{{
let g:undotree_WindowLayout = 3
let g:undotree_SetFocusWhenToggle = 1
" }}}

" alias {{{
command! Json set ft=json
command! Jp set ft=jproperties
command! Diff windo difft
command! Diffo windo diffo
" }}}

" 主题配置 {{{
" colorscheme codedark
" let g:lightline.colorscheme = 'apprentice'

" colorscheme gruvbox
" let g:lightline.colorscheme = 'gruvbox'

colorscheme one
let g:lightline.colorscheme = 'one'
set bg=dark
hi TSPunctBracket guifg=#ABB2BF
" }}}

runtime mappings.vim
runtime whichkey.vim
runtime misc.vim
runtime runner.vim
