let s:coc_enable = 1
let s:nvim_treesitter = 0

" vim-plug {{{
call plug#begin('~/.vim/plugged')

Plug 'lu5je0/lightline-bufferline'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'schickling/vim-bufonly'
Plug 'liuchengxu/vista.vim'

" if has("nvim")
"     let s:nvim_treesitter = 1
"     Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" endif

Plug 'chr4/nginx.vim'
Plug 'cespare/vim-toml'

" fern
Plug 'lu5je0/fern.vim'
Plug 'lu5je0/fern-renderer-nerdfont.vim'
Plug 'lambdalisue/nerdfont.vim'
Plug 'lambdalisue/fern-hijack.vim'
Plug 'lambdalisue/glyph-palette.vim'
Plug 'lambdalisue/fern-git-status.vim'

Plug 'yianwillis/vimcdoc'
Plug 'chrisbra/vim-diff-enhanced'
Plug 'MTDL9/vim-log-highlighting'
Plug 'tpope/vim-commentary'
Plug 'honza/vim-snippets'
Plug 'mg979/vim-visual-multi'
Plug 'kana/vim-textobj-user'
Plug 'sgur/vim-textobj-parameter'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-indent'
Plug 'mhinz/vim-signify'
Plug 'voldikss/vim-translator'
Plug 'tpope/vim-fugitive'
Plug 'rbong/vim-flog'
Plug 'tpope/vim-repeat'
Plug 'lu5je0/vim-java-bytecode'
Plug 'vim-scripts/ReplaceWithRegister'

" Peekaboo extends " and @ in normal mode and <CTRL-R> in insert mode so you can see the contents of the registers.
Plug 'junegunn/vim-peekaboo'
Plug 'lu5je0/vim-terminal-help'
Plug 'skywind3000/asynctasks.vim'
Plug 'skywind3000/asyncrun.vim'
Plug 'skywind3000/asyncrun.extra'
Plug 'elzr/vim-json'
Plug 'terryma/vim-expand-region'
Plug 'machakann/vim-highlightedyank'
Plug 'tommcdo/vim-exchange'
Plug 'mbbill/undotree'
Plug 'liuchengxu/vim-which-key'
Plug 'lu5je0/vim-base64'

if !has("gui")
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
endif

if s:coc_enable == 1
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
else
    Plug 'ervandew/supertab'
endif

" save with sudo
if !has("win32")
    Plug 'lambdalisue/suda.vim'
endif

if !has("gui") && !has("mac")
    Plug 'brglng/vim-im-select'
endif
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

" 变量命名转换
Plug 'chiedo/vim-case-convert'

" Plug 'lilydjwg/colorizer'

Plug 'itchyny/lightline.vim'

" themes
Plug 'lu5je0/vim-one'
Plug 'gruvbox-community/gruvbox'
Plug 'hzchirs/vim-material'
Plug 'ayu-theme/ayu-vim'
Plug 'w0ng/vim-hybrid'
Plug 'lu5je0/lightline-ones'
call plug#end()
" }}}

" runtime 加载.vim {{{
runtime settings.vim
runtime foldtext.vim
if has("win32")
    runtime escalt.vim
endif
runtime gvim.vim
runtime functions.vim
runtime plug-config/fern.vim
runtime plug-config/leaderf.vim
runtime plug-config/autoformat.vim
runtime plug-config/terminal.vim
runtime plug-config/lightline.vim
runtime plug-config/vista.vim

if s:coc_enable == 1
    runtime plug-config/coc.vim
endif
" }}}

" autocmd {{{
augroup file_type
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType * set formatoptions-=o
    autocmd FileType json,xml,html,yaml setlocal tabstop=2 | setlocal shiftwidth=2 | setlocal softtabstop=2
    " autocmd BufNewFile,BufRead *.json setlocal filetype=jsonc
    " 超过最大的文件大小后禁用语法高亮
    autocmd Filetype * if getfsize(@%) > 1024 * 1024 | setlocal syntax=OFF | endif
augroup END

" augroup filetype_help
"     autocmd!
"     autocmd BufRead * if &l:buftype ==# 'help' | set number | set bl | set buftype="" | endif
" augroup END


" }}}


" treesitter {{{ "
if s:nvim_treesitter == 1
lua <<EOF
require'nvim-treesitter.configs'.setup {
  -- Modules and its options go here
  ensure_installed = { "java", "python", "lua", "c", "json" },
  highlight = { enable = true },
  incremental_selection = { enable = true },
  textobjects = { enable = true },
}
EOF
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
endif
" }}} treesitter "


" vim-expand-region {{{
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
" }}}

" vim-diff-enhanced {{{
set diffopt+=internal,algorithm:patience
" }}}

" vim-json {{{
let g:vim_json_syntax_conceal = 0
" }}}

" vim-commentary {{{
augroup vim_commentary
    autocmd FileType crontab setlocal commentstring=#\ %s
augroup END
" }}}

" auto-paris {{{
let g:AutoPairs= {'(':')', '[':']', '{':'}',"'":"'",'"':'"', "`":"`", '```':'```', '"""':'"""', "'''":"'''"}
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutJump = ''
let g:AutoPairsShortcutFastWrap = ''
let g:AutoPairsMoveCharacter = ''
" }}}

" vim-textobj-parameter {{{
let g:vim_textobj_parameter_mapping = 'a'
" }}}

" delimitMate {{{
let g:delimitMate_expand_cr=1
" }}}

" supertab {{{
let g:SuperTabDefaultCompletionType = "<c-n>"
" }}}

" highlightedyank {{{
let g:highlightedyank_highlight_duration=300
" }}}

" toggle_terminal {{{

" set your favorite shell
if has("win32")
    let g:toggle_terminal#command = 'wsl'
else
    let g:toggle_terminal#command = ''
endif

" set terminal window position
" (see possible options at :help vertical)
" let g:toggle_terminal#position = 's'

" }}}

" undotree {{{
let g:undotree_WindowLayout = 3
let g:undotree_SetFocusWhenToggle = 1
" }}}

" alias {{{
command! Json set ft=json
command! Jp set ft=jproperties
command! Diff windo difft
command! Diffo windo diffo
" }}}

" 主题配置 {{{
colorscheme one
let g:lightline.colorscheme = 'ones'
set bg=dark
hi TSPunctBracket guifg=#ABB2BF
" }}}

runtime mappings.vim
runtime im.vim
runtime whichkey.vim
runtime misc.vim
runtime runner.vim
